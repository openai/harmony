"""Type stubs for the OpenAI Harmony Rust bindings in the C extension."""

from collections.abc import Iterable
from enum import Enum
from typing import Any

class HarmonyError(RuntimeError): ...

class PyHarmonyEncoding:
    def __init__(self, name: str) -> None: ...
    @property
    def name(self) -> str: ...
    def decode_bytes(self, tokens: list[int]) -> bytes: ...
    def decode_utf8(self, tokens: list[int]) -> str: ...
    def encode(
        self,
        text: str,
        allowed_special: Iterable[str] | None = None,
    ) -> list[int]: ...
    def is_special_token(self, token: int) -> bool: ...
    def parse_messages_from_completion_tokens(
        self,
        tokens: list[int],
        role: str | None = None,
    ) -> str: ...
    def render(
        self,
        message_json: str,
        render_options: dict[str, Any] | None = None,
    ) -> list[int]: ...
    def render_conversation(
        self,
        conversation_json: str,
        config: dict[str, Any] | None = None,
    ) -> list[int]: ...
    def render_conversation_for_completion(
        self,
        conversation_json: str,
        next_turn_role: str,
        config: dict[str, Any] | None = None,
    ) -> list[int]: ...
    def render_conversation_for_training(
        self,
        conversation_json: str,
        config: dict[str, Any] | None = None,
    ) -> list[int]: ...
    def special_tokens(self) -> list[str]: ...
    def stop_tokens(self) -> list[int]: ...
    def stop_tokens_for_assistant_actions(self) -> list[int]: ...

class PyStreamableParser:
    def __init__(
        self,
        encoding: PyHarmonyEncoding,
        role: str | None = None,
    ) -> None: ...
    def process(self, token: int) -> None: ...
    def process_eos(self) -> None: ...
    @property
    def current_channel(self) -> str | None: ...
    @property
    def current_content(self) -> str: ...
    @property
    def current_content_type(self) -> str | None: ...
    @property
    def current_recipient(self) -> str | None: ...
    @property
    def current_role(self) -> str | None: ...
    @property
    def last_content_delta(self) -> str | None: ...
    @property
    def messages(self) -> str: ...
    @property
    def state(self) -> str: ...
    @property
    def tokens(self) -> list[int]: ...

class PyStreamState(Enum):
    ExpectStart = ...
    Header = ...
    Content = ...

    def __int__(self) -> int: ...

def get_tool_namespace_config(tool: str) -> Any: ...
def load_harmony_encoding(name: str) -> PyHarmonyEncoding: ...
